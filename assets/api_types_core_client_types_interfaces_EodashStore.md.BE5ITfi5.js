import{_ as o,c,o as d,ag as t}from"./chunks/framework.CVgoddIT.js";const h=JSON.parse('{"title":"Interface: EodashStore","description":"","frontmatter":{},"headers":[],"relativePath":"api/types/core/client/types/interfaces/EodashStore.md","filePath":"api/types/core/client/types/interfaces/EodashStore.md"}'),a={name:"api/types/core/client/types/interfaces/EodashStore.md"};function r(l,e,i,n,s,u){return d(),c("div",null,[...e[0]||(e[0]=[t('<p><a href="./../../../../../">@eodash/eodash</a> / <a href="./../">types/core/client/types</a> / EodashStore</p><h1 id="interface-eodashstore" tabindex="-1">Interface: EodashStore <a class="header-anchor" href="#interface-eodashstore" aria-label="Permalink to &quot;Interface: EodashStore&quot;">​</a></h1><p>Defined in: dist/types/core/client/types.d.ts:307</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="actions" tabindex="-1">actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;actions&quot;">​</a></h3><blockquote><p><strong>actions</strong>: <code>object</code></p></blockquote><p>Defined in: dist/types/core/client/types.d.ts:320</p><h4 id="changemapprojection" tabindex="-1">changeMapProjection() <a class="header-anchor" href="#changemapprojection" aria-label="Permalink to &quot;changeMapProjection()&quot;">​</a></h4><blockquote><p><strong>changeMapProjection</strong>: (<code>code?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Change <code>eox-map</code> projection from an EPSG code or a registered projection code</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="code" tabindex="-1">code? <a class="header-anchor" href="#code" aria-label="Permalink to &quot;code?&quot;">​</a></h6><p><code>string</code> | <code>number</code> | { <code>def</code>: <code>string</code>; <code>name</code>: <code>string</code>; }</p><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="getlayers" tabindex="-1">getLayers() <a class="header-anchor" href="#getlayers" aria-label="Permalink to &quot;getLayers()&quot;">​</a></h4><blockquote><p><strong>getLayers</strong>: (<code>el?</code>) =&gt; <code>object</code>[]</p></blockquote><p>returns the layers of the <code>eox-map</code></p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="el" tabindex="-1">el? <a class="header-anchor" href="#el" aria-label="Permalink to &quot;el?&quot;">​</a></h6><p><code>string</code></p><p><code>eox-map</code> element selector</p><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>object</code>[]</p><h4 id="registerprojection" tabindex="-1">registerProjection() <a class="header-anchor" href="#registerprojection" aria-label="Permalink to &quot;registerProjection()&quot;">​</a></h4><blockquote><p><strong>registerProjection</strong>: (<code>code?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Register EPSG projection in <code>eox-map</code> and adds it to <code>availableMapProjection</code></p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="code-1" tabindex="-1">code? <a class="header-anchor" href="#code-1" aria-label="Permalink to &quot;code?&quot;">​</a></h6><p><code>string</code> | <code>number</code> | { <code>def</code>: <code>string</code>; <code>name</code>: <code>string</code>; }</p><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>void</code>&gt;</p><hr><h3 id="stac" tabindex="-1">stac <a class="header-anchor" href="#stac" aria-label="Permalink to &quot;stac&quot;">​</a></h3><blockquote><p><strong>stac</strong>: <code>object</code></p></blockquote><p>Defined in: dist/types/core/client/types.d.ts:340</p><p>Pinia store definition used to navigate the root STAC catalog.</p><h4 id="usestacstore" tabindex="-1">useSTAcStore <a class="header-anchor" href="#usestacstore" aria-label="Permalink to &quot;useSTAcStore&quot;">​</a></h4><blockquote><p><strong>useSTAcStore</strong>: <code>StoreDefinition</code>&lt;<code>&quot;stac&quot;</code>, <code>Pick</code>&lt;{ <code>init</code>: (<code>endpoint</code>) =&gt; <code>void</code>; <code>isApi</code>: <code>Ref</code>&lt;<code>boolean</code>, <code>boolean</code>&gt;; <code>loadSelectedCompareSTAC</code>: (<code>relativePath?</code>, <code>isPOI?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSelectedSTAC</code>: (<code>relativePath?</code>, <code>isPoi?</code>, <code>stacItem?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSTAC</code>: (<code>url?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>resetSelectedCompareSTAC</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>selectedCompareStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>selectedItem</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code> | <code>StacItem</code>, <code>null</code> | <code>StacLink</code> | <code>StacItem</code>&gt;; <code>selectedStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>stac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code>[], <code>null</code> | <code>StacLink</code>[]&gt;; <code>stacEndpoint</code>: <code>Ref</code>&lt;<code>null</code> | <code>string</code>, <code>null</code> | <code>string</code>&gt;; }, <code>&quot;stac&quot;</code> | <code>&quot;stacEndpoint&quot;</code> | <code>&quot;isApi&quot;</code> | <code>&quot;selectedStac&quot;</code> | <code>&quot;selectedCompareStac&quot;</code> | <code>&quot;selectedItem&quot;</code>&gt;, <code>Pick</code>&lt;{ <code>init</code>: (<code>endpoint</code>) =&gt; <code>void</code>; <code>isApi</code>: <code>Ref</code>&lt;<code>boolean</code>, <code>boolean</code>&gt;; <code>loadSelectedCompareSTAC</code>: (<code>relativePath?</code>, <code>isPOI?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSelectedSTAC</code>: (<code>relativePath?</code>, <code>isPoi?</code>, <code>stacItem?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSTAC</code>: (<code>url?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>resetSelectedCompareSTAC</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>selectedCompareStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>selectedItem</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code> | <code>StacItem</code>, <code>null</code> | <code>StacLink</code> | <code>StacItem</code>&gt;; <code>selectedStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>stac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code>[], <code>null</code> | <code>StacLink</code>[]&gt;; <code>stacEndpoint</code>: <code>Ref</code>&lt;<code>null</code> | <code>string</code>, <code>null</code> | <code>string</code>&gt;; }, <code>never</code>&gt;, <code>Pick</code>&lt;{ <code>init</code>: (<code>endpoint</code>) =&gt; <code>void</code>; <code>isApi</code>: <code>Ref</code>&lt;<code>boolean</code>, <code>boolean</code>&gt;; <code>loadSelectedCompareSTAC</code>: (<code>relativePath?</code>, <code>isPOI?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSelectedSTAC</code>: (<code>relativePath?</code>, <code>isPoi?</code>, <code>stacItem?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>loadSTAC</code>: (<code>url?</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>resetSelectedCompareSTAC</code>: () =&gt; <code>Promise</code>&lt;<code>void</code>&gt;; <code>selectedCompareStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>selectedItem</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code> | <code>StacItem</code>, <code>null</code> | <code>StacLink</code> | <code>StacItem</code>&gt;; <code>selectedStac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacCollection</code>, <code>null</code> | <code>StacCollection</code>&gt;; <code>stac</code>: <code>Ref</code>&lt;<code>null</code> | <code>StacLink</code>[], <code>null</code> | <code>StacLink</code>[]&gt;; <code>stacEndpoint</code>: <code>Ref</code>&lt;<code>null</code> | <code>string</code>, <code>null</code> | <code>string</code>&gt;; }, <code>&quot;init&quot;</code> | <code>&quot;loadSTAC&quot;</code> | <code>&quot;loadSelectedSTAC&quot;</code> | <code>&quot;loadSelectedCompareSTAC&quot;</code> | <code>&quot;resetSelectedCompareSTAC&quot;</code>&gt;&gt;</p></blockquote><hr><h3 id="states" tabindex="-1">states <a class="header-anchor" href="#states" aria-label="Permalink to &quot;states&quot;">​</a></h3><blockquote><p><strong>states</strong>: <code>object</code></p></blockquote><p>Defined in: dist/types/core/client/types.d.ts:309</p><p>Stateful Reactive variables</p><h4 id="availablemapprojection" tabindex="-1">availableMapProjection <a class="header-anchor" href="#availablemapprojection" aria-label="Permalink to &quot;availableMapProjection&quot;">​</a></h4><blockquote><p><strong>availableMapProjection</strong>: <code>Ref</code>&lt;<code>string</code>, <code>string</code>&gt;</p></blockquote><p>available projection to be rendered by the Map</p><h4 id="currenturl" tabindex="-1">currentUrl <a class="header-anchor" href="#currenturl" aria-label="Permalink to &quot;currentUrl&quot;">​</a></h4><blockquote><p><strong>currentUrl</strong>: <code>Ref</code>&lt;<code>string</code>, <code>string</code>&gt;</p></blockquote><p>Currently selected STAC endpoint</p><h4 id="datetime" tabindex="-1">datetime <a class="header-anchor" href="#datetime" aria-label="Permalink to &quot;datetime&quot;">​</a></h4><blockquote><p><strong>datetime</strong>: <code>Ref</code>&lt;<code>string</code>, <code>string</code>&gt;</p></blockquote><p>Currently selected datetime</p><h4 id="indicator" tabindex="-1">indicator <a class="header-anchor" href="#indicator" aria-label="Permalink to &quot;indicator&quot;">​</a></h4><blockquote><p><strong>indicator</strong>: <code>Ref</code>&lt;<code>string</code>, <code>string</code>&gt;</p></blockquote><p>Currently selected indicator</p><h4 id="registeredprojections" tabindex="-1">registeredProjections <a class="header-anchor" href="#registeredprojections" aria-label="Permalink to &quot;registeredProjections&quot;">​</a></h4><blockquote><p><strong>registeredProjections</strong>: <code>`EPSG${number}`</code>[]</p></blockquote>',58)])])}const g=o(a,[["render",r]]);export{h as __pageData,g as default};
